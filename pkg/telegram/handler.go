package telegram

import (
	"strings"

	"github.com/HironixRotifer/golang-chat-gpt-telegram-bot/pkg/gpt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

// constants with commands to bot
const (
	commandStart          = "start"   // command to start bot
	commandAccount        = "account" // command to get account info
	commandSettings       = "setting" // command to set type of bot
	commandGeneratedImage = "genimg"  // command to generate image by keywords
	commandHelp           = "help"    // command to get help list all commands
)

var (
	// ok = "üëå"
	oh = "ü´¢"
	// lw = "ü´∂"
	ct = "üò∫"
)

// handleCommand is a handle function to send a command for bot
func (b *Bot) handleCommand(message *tgbotapi.Message) error {
	switch message.Command() {
	case commandStart:
		return b.handleStartCommand(message)
	case commandAccount:
		return b.handleAccountCommand(message)
	case commandSettings:
		return b.handleSettingCommand(message)
	case commandGeneratedImage:
		return b.handleGenerateImageCommand(message)
	case commandHelp:
		return b.handleHelpCommand(message)
	default:
		return b.handleUnknownCommand(message)
	}
}

// handleMessage is a handle function to send a message for bot
// Exampe: "Hi, what`s up?"
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	// create a new temp message
	msgTemp := tgbotapi.NewMessage(message.Chat.ID, "Please wait while I process your question..."+ct)
	id, _ := b.bot.Send(msgTemp)

	// get response from chat-gpt3
	response, err := gpt.GetResponse(gpt.Client, gpt.Ctx, message.Text)
	if err != nil {
		message.Text = err.Error()
	}
	message.Text = strings.Join(response, " ")

	// check the response for an empty value
	if message.Text == "" {
		message.Text = "Please try again" + oh
	}

	// remove a temp message
	deleteMsg := tgbotapi.NewDeleteMessage(message.Chat.ID, id.MessageID)
	b.bot.Send(deleteMsg)
	msg := tgbotapi.NewMessage(message.Chat.ID, message.Text)

	b.bot.Send(msg)
}

// handleStrartCommand is handle function to start a bot
func (b *Bot) handleStartCommand(message *tgbotapi.Message) error {
	msg := tgbotapi.NewMessage(message.Chat.ID, "what's up? my name is Rosetta. i could help you with anything, but only when i feel like it.")
	_, err := b.bot.Send(msg)
	return err
}

// handleAccountCommand is handle function by getting info about user account
func (b *Bot) handleAccountCommand(message *tgbotapi.Message) error {
	msg := tgbotapi.NewMessage(message.Chat.ID, "todo:")
	_, err := b.bot.Send(msg)
	return err
}

// handleSettingCommand is a handle function by change type of chat-GPT
func (b *Bot) handleSettingCommand(message *tgbotapi.Message) error {
	msg := tgbotapi.NewMessage(message.Chat.ID, "todo:")

	// —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
	btn1 := tgbotapi.NewInlineKeyboardButtonData("gpt-3.5-turbo", "btn1")
	btn2 := tgbotapi.NewInlineKeyboardButtonData("gpt-3.5-turbo-instruct", "gpt-3.5-turbo-instruct")
	btn3 := tgbotapi.NewInlineKeyboardButtonData("gpt-3.5-turbo-16k", "btn3")
	btn4 := tgbotapi.NewInlineKeyboardButtonData("gpt-4", "gpt-4")
	row1 := tgbotapi.NewInlineKeyboardRow(btn1, btn2)
	row2 := tgbotapi.NewInlineKeyboardRow(btn3, btn4)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(row1, row2)

	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ // –ó–∞–ø–∏—Ö–Ω—É—Ç—å –≤ —Ñ–∞–π–ª–∏–∫ —Å—Ç—Ä–æ–∫–∏
	msg = tgbotapi.NewMessage(message.Chat.ID, `"–í –±–æ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã 4 –º–æ–¥–µ–ª–∏ ChatGPT:
	‚úîÔ∏è gpt-3.5-turbo ‚Äî —Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –∏ –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å –≤ —Å–µ–º–µ–π—Å—Ç–≤–µ GPT, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —á–∞—Ç–∞ –∏ –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–∫—Å—Ç–∞. –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: 4096.
	‚úîÔ∏è gpt-3.5-turbo-instruct ‚Äî –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á: –ø–µ—Ä–µ–≤–µ–¥–∏, —Å–¥–µ–ª–∞–π —Å–∞–º–º–∞—Ä–∏ –∏ –¥—Ä. –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: 4096.
	‚úîÔ∏è gpt-3.5-turbo-16k –∏–º–µ–µ—Ç —Ç–µ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å, –Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤ 4 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: 16384.
	‚úîÔ∏è gpt-4 ‚Äî —Å–∞–º–∞—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–∞—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –º–æ–¥–µ–ª—å –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞, —Å–ø–æ—Å–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: 8192.
	
	–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫c–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é –¥–ª–∏–Ω—É –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ + —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ GPT. 1 —Ç–æ–∫–µ–Ω —Ä–∞–≤–µ–Ω –ø—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏–ª–∏ 1 —Å–∏–º–≤–æ–ª—É –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö.
	
	–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –º–æ–¥–µ–ª–∏ gpt-3.5-turbo –∏ -instruct. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–æ–π –º–æ–≥—É—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∞–∫–∂–µ –º–æ–¥–µ–ª—å 16k. –î–æ—Å—Ç—É–ø –∫ GPT-4 –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ /premium:"`)

	msg.ReplyMarkup = keyboard

	// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	// –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
	// –ø–æ–º–µ—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª

	_, err := b.bot.Send(msg)
	return err
}

// handleGenerateImageCommand TODO:
func (b *Bot) handleGenerateImageCommand(message *tgbotapi.Message) error {
	msg := tgbotapi.NewMessage(message.Chat.ID, "todo:")
	_, err := b.bot.Send(msg)
	return err
}

// handleHelpCommand is a handle function by getting info about the commands
func (b *Bot) handleHelpCommand(message *tgbotapi.Message) error {
	msg := tgbotapi.NewMessage(message.Chat.ID, "todo:")
	_, err := b.bot.Send(msg)
	return err
}

// handleUnknownCommand is a handle function by getting unknown command
func (b *Bot) handleUnknownCommand(message *tgbotapi.Message) error {
	msg := tgbotapi.NewMessage(message.Chat.ID, "I don`t know this command ;(")
	_, err := b.bot.Send(msg)
	return err
}
